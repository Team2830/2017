// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2830.PeligrosoRobot.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2830.PeligrosoRobot.Robot;

/**
 *
 */
public class DriveDistance extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_distance;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private boolean isFirstRun = true;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveDistance(double distance) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_distance = distance;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
   
    // Called just before this Command runs the first time
    protected void initialize() {
    	resetCounters();
    }

	private void resetCounters() {
		Robot.drivetrain.getLeftEncoder().reset();
    	Robot.drivetrain.getRightEncoder().reset();
    	Robot.drivetrain.getAnalogGyro1().reset();
	}

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(isFirstRun){
    		resetCounters();
    		isFirstRun = false;
    	}
    	SmartDashboard.putString("Running Command", "DriveDistance");
       	SmartDashboard.putNumber("Left Encoder",Robot.drivetrain.getLeftEncoder().getDistance());
       	SmartDashboard.putNumber("Right Encoder",Robot.drivetrain.getRightEncoder().getDistance());
       	SmartDashboard.putNumber("Gyro",Robot.drivetrain.getAnalogGyro1().getAngle());

    	Robot.drivetrain.driveForward(1,0);
    	
    	if(Robot.drivetrain.getAnalogGyro1().getAngle()>1.00){
    		Robot.drivetrain.driveForward(1,.5);
    	}
    	if(Robot.drivetrain.getAnalogGyro1().getAngle()<-1.00){
    		Robot.drivetrain.driveForward(1,-.5);
    	}
    }
  

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if(m_distance <= Robot.drivetrain.getLeftEncoder().getDistance() || m_distance <= Robot.drivetrain.getRightEncoder().getDistance()){
    		resetCounters();
    		return true;
    	}
    	return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetrain.driveForward(0,0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.drivetrain.driveForward(0, 0);
    }
}
